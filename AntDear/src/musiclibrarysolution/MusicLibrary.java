package musiclibrarysolution;

import java.util.ArrayList; //ArrayList is used for storing objects
import javax.swing.JFrame;
import javax.swing.JTextField;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTable;
import javax.swing.border.BevelBorder; //JFrame is needed for GUI
import javax.swing.table.DefaultTableModel;

public class MusicLibrary extends JFrame { //JFrame is needed for GUI 
	private static final long serialVersionUID = 1L;
	
	//Private variables
	private AlbumQueries albumQueries; //instance of the AlbumQueries class
	private ArrayList<Album> allAlbums; //array to store all albums
	private JTextField txtSearchField;
	static JTable tableAlbums;
	DefaultTableModel tableModel;
	
	//Constants for table columns
	private static final int ID_COL = 0;
	private static final int ARTIST_COL = 1;
	private static final int NAME_COL = 2;
	private static final int AVAILABILITY_COL = 3;
	private static final int AVAILABILITY_STRING_COL = 4;
	private static final int COL_COUNT = 5;
	
	//Constructor for MusicLibrary
	public MusicLibrary() {
		super("Music Library"); //A call to superclass's constructor method to set the title
		setBounds(0,0,500,331); //Set the size of the frame
		getContentPane().setLayout(null);
		
		//GUI elements (code generated by WindowBuilder)
		txtSearchField = new JTextField();
		txtSearchField.setBounds(15, 16, 297, 26);
		getContentPane().add(txtSearchField);
		txtSearchField.setColumns(10);
		
		//A button to search for albums
		JButton btnSearch = new JButton("Search");
		btnSearch.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				searchAlbums(); //Search button clicked -> search albums in the database
			}
		});
		btnSearch.setBounds(313, 15, 115, 29);
		getContentPane().add(btnSearch);
		
		
		//Table for showing search results
		tableAlbums = new JTable();
		tableAlbums.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		tableAlbums.setBounds(15, 50, 413, 100);
		tableModel = new DefaultTableModel(
				new Object[10][COL_COUNT],  // Code changed here
				new String[] {"ID", "Artist", "Album", "", "Available"} // Set the column names
			);
		tableAlbums.setModel(tableModel);
		
		//Let's make ID and availability columns hidden. We remove them from the visible table
		//but they will be kept in the model and can be accessed using tableAlbums.getModel().getValueAt().
		tableAlbums.removeColumn(tableAlbums.getColumnModel().getColumn(AVAILABILITY_COL));
		tableAlbums.removeColumn(tableAlbums.getColumnModel().getColumn(ID_COL));
		
		getContentPane().add(tableAlbums);
		
		
		//A button to update an albums availability
		JButton btnBorrow = new JButton("Borrow/Return");
		btnBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				updateAlbumAvailability();
			}
		});
		btnBorrow.setBounds(15, 169, 170, 29);
		getContentPane().add(btnBorrow);
		
		//instantiate albumQueries object to get the connection to db ready
		albumQueries = new AlbumQueries();
	}
	
	//Main method
	public static void main(String args[]) {
		MusicLibrary frame = new MusicLibrary();
		frame.setVisible(true);
	}
	
	/************
	 * searchAlbums
	 * Queries the database for albums and lists them in a table
	 * Parameters: -
	 * Returns: -
	 */
	private void searchAlbums() {
		
		Album currentAlbum;
		
		// 3c, 3d
		allAlbums = albumQueries.getAlbums(txtSearchField.getText()); // Calling the AlbumQueries method that returns a list containing all albums from the database
		tableModel.setRowCount(allAlbums.size());
		for (int row=0; row<allAlbums.size(); row++){ //allAlbums.size() returns the amount of items in the allAlbums list
			currentAlbum = allAlbums.get(row); // get an album from the ArrayList allAlbums
			tableAlbums.getModel().setValueAt(currentAlbum.getID(), row, ID_COL);
			tableAlbums.getModel().setValueAt(currentAlbum.getArtist(), row, ARTIST_COL);
			tableAlbums.getModel().setValueAt(currentAlbum.getName(), row, NAME_COL);
			tableAlbums.getModel().setValueAt(currentAlbum.getAvailability(), row, AVAILABILITY_COL);
			tableAlbums.getModel().setValueAt(currentAlbum.getAvailabilityString(), row, AVAILABILITY_STRING_COL);
		}
	}
	
	/*************
	 * updateAlbumAvailability
	 * Updates selected albums availability
	 * Parameters: -
	 * Returns: -
	 */
	private void updateAlbumAvailability() {
		/* TODO-04a: get the selected row of the table (you can use getSelectedRow() method of the table).
		 * 
		 * TODO-04b: get the values of the cells ID and Availability on the selected row. 
		 * You can store them in variables if you like or just use them as parameters of the method call. 
		 * (You can use getModel().getValueAt() method of the table and
		 * to get the correct column you can use the constants ID_COL and AVAILABILITY_COL.)
		 * Hint: table.getValueAt() returns objects so you need to use toString() to make 
		 * them parsable to integers and booleans with Integer.parseInt() and
		 * Boolean.parseBoolean().
		 *  
		 * TODO-04c: Call updateAlbumAvailability method of the AlbumQueries class with values of 
		 * the selected row as parameters.
		 *  
		 */
		albumQueries.updateAlbumAvailability(Integer.parseInt(tableAlbums.getModel().getValueAt(tableAlbums.getSelectedRow(), ID_COL).toString()), !(Boolean.parseBoolean(tableAlbums.getModel().getValueAt(tableAlbums.getSelectedRow(), AVAILABILITY_COL).toString())));
		searchAlbums();
	}
}
